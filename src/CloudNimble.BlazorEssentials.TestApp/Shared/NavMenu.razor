@inject AppState appState

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorEssentials Sample</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">

        @foreach (var items in appState.NavItems.Where(c => c.AllowAnonymous).GroupBy(c => c.Category))
        {
            if (!string.IsNullOrWhiteSpace(items.Key))
            {
                <div class="nav-header px-3">
                    @items.Key
                </div>
            }
            @foreach (var item in items)
            {
                if (!item.IsVisible) continue;
                <div class="nav-item px-3">
                    <NavLink class="nav-link px-2" href="@item.Url" @onclick="@(() => appState.CurrentNavItem = item)" Match="NavLinkMatch.All">
                        <i class="@item.IconClass px-2" aria-hidden="true"></i>@item.DisplayText
                    </NavLink>
                </div>
            }
        }
    </nav>
</div>

@code {

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        //RWM: Make sure the NavMenu re-renders when the CurrentUser changes.
        appState.PropertyChanged += (sender, e) =>
        {
            this.StateHasChanged();
        };
        await Task.CompletedTask;
    }

}
