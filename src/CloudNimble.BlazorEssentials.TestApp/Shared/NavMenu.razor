@inject AppStateBase appState

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">BlazorEssentials Test</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@(collapseNavMenu ? "collapse" : null)" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match=NavLinkMatch.All>
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        @*@if (appState.IsSignedIn)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="securedpage">
                    <span class="oi oi-plus" aria-hidden="true"></span> Secured Page
                </NavLink>
            </li>
            @if (appState.CurrentUser.IsInRole("admin"))
            {
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="adminpage">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Admin Page
                    </NavLink>
                </li>
            }
        }*@
    </ul>
</div>

@functions {
    bool collapseNavMenu = true;

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        //RWM: Make sure the NavMenu re-renders when the CurrentUser changes.
        appState.PropertyChanged += (sender, e) =>
        {
            this.StateHasChanged();
        };

        await Task.FromResult(true);
    }

}