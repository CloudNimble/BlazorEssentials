@using CloudNimble.BlazorEssentials.Merlin
@using System.ComponentModel

<div class="title">@operation.Title</div>

<div class="finished">@Finished</div>

<div class="propertyChanges">@PropertyChangedCount</div>

<div class="statusMessage">@operation.ResultText</div>

@code
{
    private Operation operation;

    /// <summary>
    ///
    /// </summary>
    [Parameter]
    public List<OperationStep> OperationSteps { get; set; }

    /// <summary>
    ///
    /// </summary>
    [Parameter]
    public string DisplayName { get; set; }

    /// <summary>
    /// 
    /// </summary>
    public bool Finished => operation != null && operation.Status > OperationStatus.InProgress;

    /// <summary>
    /// 
    /// </summary>
    public int PropertyChangedCount { get; set; }

    protected override void OnInitialized()
    {
        operation = new Operation(DisplayName, OperationSteps, "success", "failure");
        operation.PropertyChanged += Operation_PropertyChanged;
        operation.Start();
    }

    private void Operation_PropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        // InvokeAsync is inherited, it syncs the call back to the render thread
        InvokeAsync(() =>
        {
            PropertyChangedCount++;
            StateHasChanged();
        }).GetAwaiter().GetResult();
    }
}